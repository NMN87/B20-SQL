-- SINGLE ROW FUNCTION
-- WILL AFFECT EACH AND EVERY ROW AND RETURN SAME NUMBER OF ROWS
-- LENGTH, UPPER, SUBSTR

SELECT UPPER(FIRST_NAME), LOWER(LAST_NAME),
SUBSTR(FIRST_NAME, 1, 1) || SUBSTR(LAST_NAME, 1, 1) AS INITIALS
FROM EMPLOYEES;    

-- PARTIAL STRING CONDITION USING LIKE % 
-- FIND EMPLOYEES THAT CONTAIN 'MI' IN THEIR NAME(COULD BE FIRST NAME OR LAST NAME),
-- CASE INSENSITIVE
SELECT FIRST_NAME , LAST_NAME
FROM EMPLOYEES
WHERE LOWER(FIRST_NAME) LIKE '%mi%' 
   OR UPPER(LAST_NAME) LIKE '%MI%';
   
-- SUBSTR (value, starting index, character count you want to get!!!)-----------
-- 123456789
-- 11-NOV-20


-- FROM EMPLOYEE TABLE OBSERVE HIRE_DATE COLUMN
-- THE FORMAT OF THE DATA IS DD-MON-YY for example today is 11-NOV-2020
-- TASK: Use the function we already know how to extract the 3 chars month string
-- your result should have 2 column, HIRE_DATE and HIRE_MONTH
SELECT HIRE_DATE, SUBSTR(HIRE_DATE, 4 , 3) AS HIRE_MONTH
FROM EMPLOYEES;

-- FIND OUT BY EXTENDING ABOVE QUERY,  WHO IS HIRED IN JAN
SELECT FIRST_NAME, HIRE_DATE
FROM EMPLOYEES
WHERE SUBSTR(HIRE_DATE, 4 , 3) = 'JAN';

-- Math operations and SQL (let'S clear this out before we talking about multi-row function)
-- MARTH OPERATION ISA SAME AS YOUR JAVA
-- IF YOU HAVE FRACTIONAL NUMBER ,YOU CAN USE ROUND FUNCTION TO ROUND UP THE NUMBER
SELECT SALARY AS MONTHLY_SAL, 
       SALARY  + 1000 AS AFTER_RAISE, 
       SALARY /4  AS WEEKLY_SALARY, 
       --SALARY /30 AS DAILY_SALARY,
       ROUND( SALARY/30, 2 ) AS ROUNDED_DAILY_SAL
FROM EMPLOYEES;

---- Lets count how many people are in employee table
SELECT * FROM EMPLOYEES;

SELECT COUNT(*) FROM EMPLOYEES;
SELECT COUNT(FIRST_NAME) FROM EMPLOYEES;

-- Task: Count the row count of each and every table
SELECT COUNT(*) AS DEP_COUNT FROM DEPARTMENTS;

SELECT COUNT(*) AS COUNTRY_COUNT FROM COUNTRIES;

SELECT COUNT(*) AS JOBS_COUNT FROM JOBS;

SELECT COUNT(*) AS LOCATION_COUNT FROM LOCATIONS;

SELECT COUNT(*) AS REGIONS_COUNT FROM REGIONS;

SELECT COUNT(*) AS JOB_HISTORY_COUNT FROM JOB_HISTORY;

-- Find out who make the most money in employees table
SELECT MAX(SALARY) FROM EMPLOYEES;

-- Find out who make the least money in employees 
SELECT MIN(SALARY) FROM EMPLOYEES;

-- Find out the monthly total budget for employees salary (get the sum of all salary)
SELECT SUM(SALARY) FROM EMPLOYEES;

-- Find out the average salary of all employees
SELECT AVG(SALARY) AS AVERAGE_SALARY,
    ROUND(AVG(SALARY),2) AS AVERAGE_SAL_2DIGITS  
FROM EMPLOYEES;

-- FIND OUT ALL ABOVE IN ONE SHOT
SELECT COUNT(*) AS EMPLOYEE_COUNT,
       MAX(SALARY) AS MAXIMUM_SALARY,
       MIN(SALARY) AS MINIMUM_SALARY,
       SUM(SALARY) AS SALARY_TOTAL,
       ROUND(AVG(SALARY),2) AS AVERAGE_SAL_2DIGITS
FROM EMPLOYEES;

-- FIND OUT HOW MANY EMPLOYEE IN EACH DEPARTMENT_ID
SELECT DEPARTMENT_ID, COUNT(*) AS DEP_EMPLOYEE_COUNT 
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;

-- FIND OUT HOW MANY EMPLOYEE IN EACH JOB_ID CATEGORY
SELECT JOB_ID, COUNT(*) AS JOB_ID_EMPLOYEE_COUNT
FROM EMPLOYEES
GROUP BY JOB_ID;

-- THIS DOES NOT MAKE SENSE
-- GROUP BY , ONLY CAN BE USED WITH AGGREGATE FUNCTIONS!!!
-- 00937. 00000 -  "not a single-group group function"
SELECT FIRST_NAME
FROM EMPLOYEES
GROUP BY JOB_ID;



-- THIS IS A BAD QUERY !!! IF YOU ADD ANY EXTRA COLUMN
-- YOU MUST USE GROUP BY TO SPECIFY THE GROUPING CRITERIA!!!!
-- 00937. 00000 -  "not a single-group group function"
 SELECT JOB_ID, COUNT(*) AS JOB_ID_EMPLOYEE_COUNT
 FROM EMPLOYEES;

-- FIND OUT MAX SALARY IN EACH DEPARTMENT_ID
SELECT MAX(SALARY) AS MAX_SALARY, DEPARTMENT_ID
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID ;

-- FIND OUT MIN SALARY IN EACH DEPARTMENT_ID
SELECT MIN(SALARY) AS MIN_SALARY, DEPARTMENT_ID
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;

-- FIND OUT SUM OF SALARY IN EACH DEPARTMENT_ID 
SELECT SUM(SALARY) AS SUM_SALARY , DEPARTMENT_ID
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;

-- FIND OUT AVG OF SALARY IN EACH DEPARTMENT_ID 
SELECT ROUND(AVG(SALARY)) AS AVERAGE_SALARY, DEPARTMENT_ID
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;

-- WE CAN COMBINE ALL ABOVE BECAUSE ALL OF THEM ARE GROUPING THE RESULT BY DEPARTMENT_ID
SELECT DEPARTMENT_ID,
       COUNT(*) AS EMPLOYEE_COUNT,
       MAX(SALARY) AS MAXIMUM_SALARY,
       MIN(SALARY) AS MINIMUM_SALARY,
       SUM(SALARY) AS SALARY_TOTAL,
       ROUND(AVG(SALARY),2) AS AVERAGE_SAL_2DIGITS
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;

-- FIND OUT HOW MANY EMPLOYEE IN EACH DEPARTMENTS
-- RESTRICT THE RESULT TO DISPLAY ONLY THOSE DEPARTMENT WITH EMP COUNT MORE THAN 10

-- IF YOU HAVE MORE CONDITIONS AFTER GROUP BY
-- YOU CAN USE HAVING CLAUSE('WHERE' DOES NOT WORK HERE!!!)
SELECT DEPARTMENT_ID , COUNT(*) AS DEP_EMP_COUNT
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING COUNT(*) > 10; --> Aggregate function can be used after HAVING to restrict result even more
                     --> 'WHERE' DOES NO WORK HERE

-- FIND OUT MAX SALARY IN EACH DEPARTMENT_ID
SELECT MAX(SALARY) AS MAX_SALARY, DEPARTMENT_ID
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID ;

-- BY EXTENDING ABOVE QUERY , FIND OUT DEPARTMENT WITH MAX SALARY LESS THEN 10000
SELECT MAX(SALARY) AS MAX_SALARY, DEPARTMENT_ID
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID 
HAVING MAX(SALARY) < 10000;

-- ONLY PLACE HAVING CLAUSE CAN SHOW UP IS RIGHT AFTER GROUP BY!!!!

-- FROM LOCATION TABLE, FIND OUT HOW MANY LOCATION IN EACH COUNTRY_ID
SELECT COUNTRY_ID, COUNT(*)
FROM LOCATIONS
GROUP BY COUNTRY_ID;

-- HOW DO I SORT IN SQL?
-- WE USE ORDER BY CLAUSE
-- ORDER BY COLUMN NAME OR COLUMK INDEX
SELECT * FROM EMPLOYEES
ORDER BY FIRST_NAME ASC; -- DEFAULT ORDER IS ALWAYS ASCENDING ORDER, LOW TO HIGH

-- ORDER THE RESULT BY THE SALARY DESC
SELECT * FROM EMPLOYEES
ORDER BY SALARY DESC; -- MUST BE SET EXPLICITLY, HIGH TO LOW

-- ORDER THE RESULT BY THE SALARY ASC
SELECT * FROM EMPLOYEES
ORDER BY SALARY ASC;

-- FIND OUT MAX SALARY IN EACH DEPARTMENT_ID
SELECT MAX(SALARY) AS MAX_SALARY, DEPARTMENT_ID
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
ORDER BY DEPARTMENT_ID;

